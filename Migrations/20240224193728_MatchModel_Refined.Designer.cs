// <auto-generated />
using System;
using BoardGameBrawl.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoardGameBrawl.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240224193728_MatchModel_Refined")]
    partial class MatchModel_Refined
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BGGUsername")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("UserAvatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly>("UserCreatedTime")
                        .HasColumnType("date");

                    b.Property<string>("UserDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("UserLastLogin")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("User_FavouriteBoardgames")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.BoardgameModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BGGId")
                        .HasColumnType("int");

                    b.Property<string>("Boardgame_Categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Boardgame_Mechanics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFile")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte>("MaxPlayers")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinPlayers")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PlayingTime")
                        .HasColumnType("int");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Boardgames", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.BoardgameRule", b =>
                {
                    b.Property<string>("BoardgameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatchmakingRuleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BoardgameId", "MatchmakingRuleId");

                    b.HasIndex("MatchmakingRuleId");

                    b.ToTable("BoardgameRules", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.GroupModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("GroupCreationDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("GroupMiniature")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.GroupParticipant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("GroupParticipants", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MatchModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardgameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MatchCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchDate_End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchDate_Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatchHostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MatchProgress")
                        .HasColumnType("int");

                    b.Property<string>("Match_Participants")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Match_Results")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Match_Ruleset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId");

                    b.HasIndex("MatchHostId");

                    b.ToTable("Matches", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MatchmakingRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("RuleDecider")
                        .HasColumnType("bit");

                    b.Property<string>("RuleDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RuleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MatchmakingRules", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MessageModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsMessageRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageBody")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("MessageSentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageTopic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.Tournament", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardgameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("MaxNumberOfPlayers")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId");

                    b.ToTable("Tournaments", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.TournamentMatch", b =>
                {
                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TournamentId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("TournamentMatches", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.TournamentParticipant", b =>
                {
                    b.Property<string>("TournamentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TournamentId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("TournamentParticipants", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserFriend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("isAccepted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFriends", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserGeolocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("GeolocationImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserGeolocations", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsShown")
                        .HasColumnType("bit");

                    b.Property<string>("Notification")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("UserNotifications", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardgameId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BoardgameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRatings", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Friday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Monday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Saturday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sunday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thursday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tuesday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Wednesday")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserSchedules", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "dbo");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.BoardgameRule", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.BoardgameModel", "Boardgame")
                        .WithMany("BoardgameRules_Boardgame")
                        .HasForeignKey("BoardgameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.MatchmakingRule", "MatchmakingRule")
                        .WithMany("BoardgameRules_MatchmakingRule")
                        .HasForeignKey("MatchmakingRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boardgame");

                    b.Navigation("MatchmakingRule");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.GroupParticipant", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.GroupModel", "Group")
                        .WithMany("GroupParticipants_Group")
                        .HasForeignKey("GroupId");

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "Participant")
                        .WithMany("GroupParticipants_Participant")
                        .HasForeignKey("ParticipantId");

                    b.Navigation("Group");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MatchModel", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.BoardgameModel", "Boardgame")
                        .WithMany("Matches_Boardgame")
                        .HasForeignKey("BoardgameId");

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "MatchHost")
                        .WithMany("Matches_Host")
                        .HasForeignKey("MatchHostId");

                    b.Navigation("Boardgame");

                    b.Navigation("MatchHost");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MessageModel", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "Receiver")
                        .WithMany("Message_Receiver")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "Sender")
                        .WithMany("Message_Sender")
                        .HasForeignKey("SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.Tournament", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.BoardgameModel", "Boardgame")
                        .WithMany("Tournaments_Boardgame")
                        .HasForeignKey("BoardgameId");

                    b.Navigation("Boardgame");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.TournamentMatch", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.MatchModel", "Match")
                        .WithMany("TournamentMatches_Match")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.Tournament", "Tournament")
                        .WithMany("TournamentMatches_Tournament")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.TournamentParticipant", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "Participant")
                        .WithMany("TournamentParticipants_Participant")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.Tournament", "Tournament")
                        .WithMany("TournamentParticipants_Tournament")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserFriend", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "Friend")
                        .WithMany("UserFriends_Friend")
                        .HasForeignKey("FriendId");

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "User")
                        .WithMany("UserFriends_User")
                        .HasForeignKey("UserId");

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserGeolocation", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "User")
                        .WithOne("UserGeolocation")
                        .HasForeignKey("BoardGameBrawl.Data.Models.Entities.UserGeolocation", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserNotification", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "Receiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserRating", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.BoardgameModel", "Boardgame")
                        .WithMany("UserRatings_Boardgame")
                        .HasForeignKey("BoardgameId");

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "User")
                        .WithMany("UserRatings_User")
                        .HasForeignKey("UserId");

                    b.Navigation("Boardgame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.UserSchedule", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", "User")
                        .WithOne("UserSchedule")
                        .HasForeignKey("BoardGameBrawl.Data.Models.Entities.UserSchedule", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoardGameBrawl.Data.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("GroupParticipants_Participant");

                    b.Navigation("Matches_Host");

                    b.Navigation("Message_Receiver");

                    b.Navigation("Message_Sender");

                    b.Navigation("Notifications");

                    b.Navigation("TournamentParticipants_Participant");

                    b.Navigation("UserFriends_Friend");

                    b.Navigation("UserFriends_User");

                    b.Navigation("UserGeolocation");

                    b.Navigation("UserRatings_User");

                    b.Navigation("UserSchedule");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.BoardgameModel", b =>
                {
                    b.Navigation("BoardgameRules_Boardgame");

                    b.Navigation("Matches_Boardgame");

                    b.Navigation("Tournaments_Boardgame");

                    b.Navigation("UserRatings_Boardgame");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.GroupModel", b =>
                {
                    b.Navigation("GroupParticipants_Group");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MatchModel", b =>
                {
                    b.Navigation("TournamentMatches_Match");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.MatchmakingRule", b =>
                {
                    b.Navigation("BoardgameRules_MatchmakingRule");
                });

            modelBuilder.Entity("BoardGameBrawl.Data.Models.Entities.Tournament", b =>
                {
                    b.Navigation("TournamentMatches_Tournament");

                    b.Navigation("TournamentParticipants_Tournament");
                });
#pragma warning restore 612, 618
        }
    }
}
